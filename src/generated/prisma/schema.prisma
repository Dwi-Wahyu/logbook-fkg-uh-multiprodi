generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Model yang sudah ada (disesuaikan)
model Pengguna {
  id             String       @id @default(uuid())
  nama           String
  username       String       @unique
  password       String
  peran          String // SUPERADMIN | ADMIN | MAHASISWA | DOSEN
  avatar         String?
  mahasiswa      Mahasiswa?
  dosen          Dosen?
  notifikasi     Notifikasi[]
  logbook        Logbook[]
  programStudiId String
  programStudi   ProgramStudi @relation(fields: [programStudiId], references: [id]) // Relasi ke ProgramStudi 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mahasiswa {
  id                  String                @id @default(uuid())
  penggunaId          String                @unique
  pengguna            Pengguna              @relation(fields: [penggunaId], references: [id], onDelete: Cascade)
  logbook             Logbook[]
  pembimbing          Dosen?                @relation("PembimbingMahasiswa", fields: [pembimbingId], references: [id])
  pembimbingId        String?
  permohonanBimbingan PermohonanBimbingan[]

  semester             Int?
  judulDisertasi       String?
  angkatan             String?
  tempatTanggalLahir   String?
  alamat               String?
  alamatKeluarga       String?
  tahunLulus           String?
  mulaiMasukPendidikan DateTime?
  pekerjaan            String?
  nomorTelpon          String?
  email                String?

  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  RiwayatPerubahanPembimbing RiwayatPerubahanPembimbing[]
}

model Dosen {
  id                  String                @id @default(uuid())
  penggunaId          String                @unique
  pengguna            Pengguna              @relation(fields: [penggunaId], references: [id], onDelete: Cascade)
  mahasiswaBimbingan  Mahasiswa[]           @relation("PembimbingMahasiswa")
  permohonanBimbingan PermohonanBimbingan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logbook {
  id          String     @id @default(uuid())
  mahasiswaId String
  mahasiswa   Mahasiswa  @relation(fields: [mahasiswaId], references: [id])
  kegiatan    Kegiatan[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Pengguna   Pengguna? @relation(fields: [penggunaId], references: [id])
  penggunaId String?
}

model RiwayatPerubahanPembimbing {
  id               String    @id @default(uuid())
  mahasiswaId      String
  mahasiswa        Mahasiswa @relation(fields: [mahasiswaId], references: [id])
  alasan           String
  pembimbingIdLama String?
  promotorIdLama   String?
  koPromotorIdLama String?
  pembimbingIdBaru String?
  promotorIdBaru   String?
  koPromotorIdBaru String?
  changedAt        DateTime  @default(now())
}

model Kegiatan {
  id           String     @id @default(uuid())
  logbookId    String
  logbook      Logbook    @relation(fields: [logbookId], references: [id])
  mataKuliahId Int
  MataKuliah   MataKuliah @relation(fields: [mataKuliahId], references: [id])
  fieldsData   Json?
  lampiran     Lampiran[]
  status       String // DIAJUKAN | DISETUJUI | DITOLAK

  alasanDitolak String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MataKuliah {
  id             Int           @id @default(autoincrement())
  judul          String
  semester       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  kegiatan       Kegiatan[]
  ProgramStudi   ProgramStudi? @relation(fields: [programStudiId], references: [id])
  programStudiId String?

  @@unique([judul, semester])
}

model Lampiran {
  id         String   @id @default(uuid())
  kegiatanId String
  kegiatan   Kegiatan @relation(fields: [kegiatanId], references: [id])
  namaFile   String
  url        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PermohonanBimbingan {
  id            String    @id @default(uuid())
  mahasiswaId   String
  mahasiswa     Mahasiswa @relation(fields: [mahasiswaId], references: [id])
  dosenId       String
  dosen         Dosen     @relation(fields: [dosenId], references: [id])
  status        String    @default("TERKIRIM") // "DITOLAK" | "DISETUJUI" | "TERKIRIM"
  pesan         String?
  alasanDitolak String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifikasi {
  id         String   @id @default(uuid())
  penggunaId String
  pengguna   Pengguna @relation(fields: [penggunaId], references: [id], onDelete: Cascade)
  judul      String
  pesan      String
  isRead     Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProgramStudi {
  id          String              @id @default(uuid())
  nama        String              @unique // Contoh: PPDGS ILMU PENYAKIT MULUT 
  displayName String // Contoh: PROGRAM PENDIDIKAN DOKTER GIGI SPESIALIS ILMU PENYAKIT MULUT 
  pengguna    Pengguna[] // Relasi dengan Pengguna (Dosen dan Mahasiswa)
  fields      ProgramStudiField[] // Field yang dibutuhkan untuk kegiatan pada ProgramStudi ini
  mataKuliah  MataKuliah[]

  templateSingleFieldForDate Boolean @default(true) // flag untuk memastikan bahwa template kegiatan program studi hanya satu field 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProgramStudiField {
  id             String       @id @default(uuid())
  programStudiId String
  programStudi   ProgramStudi @relation(fields: [programStudiId], references: [id])
  fieldName      String // Contoh: "Hari/Tanggal", "Jam", "No. RM", "Nama Pasien" 
  fieldType      String // Tipe data field (misal: "TEXT", "DATE", "NUMBER", "BOOLEAN")
  isRequired     Boolean      @default(false) // Apakah field wajib diisi
  order          Int          @default(0) // Untuk menentukan urutan field

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([programStudiId, fieldName]) // Nama field harus unik dalam satu program studi
}
