// schema.prisma
// Ini adalah bagian dari schema Anda yang sudah ada, tidak perlu diulang penuh
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Model yang sudah ada (disesuaikan)
model Pengguna {
  id             String       @id @default(uuid())
  nama           String
  username       String       @unique
  password       String
  peran          String // SUPERADMIN | ADMIN | MAHASISWA | DOSEN
  avatar         String?
  mahasiswa      Mahasiswa?
  dosen          Dosen?
  notifikasi     Notifikasi[]
  logbook        Logbook[]
  programStudiId String
  programStudi   ProgramStudi @relation(fields: [programStudiId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mahasiswa {
  id                  String                @id @default(uuid())
  penggunaId          String                @unique
  pengguna            Pengguna              @relation(fields: [penggunaId], references: [id], onDelete: Cascade)
  logbook             Logbook[]
  pembimbing          Dosen?                @relation("PembimbingMahasiswa", fields: [pembimbingId], references: [id])
  pembimbingId        String?
  permohonanBimbingan PermohonanBimbingan[]

  semester             Int?
  judulDisertasi       String?
  angkatan             String?
  tempatTanggalLahir   String?
  alamat               String?
  alamatKeluarga       String?
  tahunLulus           String?
  mulaiMasukPendidikan DateTime?
  pekerjaan            String?
  nomorTelpon          String?
  email                String?
  jenisKelamin         String?

  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  RiwayatPerubahanPembimbing RiwayatPerubahanPembimbing[]
}

model Dosen {
  id                  String                @id @default(uuid())
  penggunaId          String                @unique
  pengguna            Pengguna              @relation(fields: [penggunaId], references: [id], onDelete: Cascade)
  mahasiswaBimbingan  Mahasiswa[]           @relation("PembimbingMahasiswa")
  permohonanBimbingan PermohonanBimbingan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logbook {
  id          String     @id @default(uuid())
  mahasiswaId String?
  mahasiswa   Mahasiswa? @relation(fields: [mahasiswaId], references: [id])
  kegiatan    Kegiatan[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Pengguna   Pengguna? @relation(fields: [penggunaId], references: [id])
  penggunaId String?
}

// --- PERUBAHAN PADA MODEL KEGIATAN: mataKuliahId menjadi opsional ---
model Kegiatan {
  id              String        @id @default(uuid())
  logbookId       String
  logbook         Logbook       @relation(fields: [logbookId], references: [id])
  mataKuliahId    Int? // <-- DIUBAH: Menjadi opsional (Int?)
  MataKuliah      MataKuliah?   @relation(fields: [mataKuliahId], references: [id]) // <-- DIUBAH: Relasi menjadi opsional
  jenisKegiatanId String
  jenisKegiatan   JenisKegiatan @relation(fields: [jenisKegiatanId], references: [id])

  semester      Int? // semester kegiatan jika tidak menggunakan mata kuliah
  fieldValues   FieldKegiatanValues[]
  lampiran      Lampiran[]
  status        String // DIAJUKAN | DISETUJUI | DITOLAK
  alasanDitolak String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MataKuliah {
  id             Int           @id @default(autoincrement())
  judul          String
  semester       Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  kegiatan       Kegiatan[]
  ProgramStudi   ProgramStudi? @relation(fields: [programStudiId], references: [id])
  programStudiId String?

  @@unique([judul, semester])
}

model Lampiran {
  id         String   @id @default(uuid())
  kegiatanId String
  kegiatan   Kegiatan @relation(fields: [kegiatanId], references: [id])
  namaFile   String
  url        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PermohonanBimbingan {
  id            String    @id @default(uuid())
  mahasiswaId   String
  mahasiswa     Mahasiswa @relation(fields: [mahasiswaId], references: [id])
  dosenId       String
  dosen         Dosen     @relation(fields: [dosenId], references: [id])
  status        String    @default("TERKIRIM") // "DITOLAK" | "DISETUJUI" | "TERKIRIM"
  pesan         String?
  alasanDitolak String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notifikasi {
  id         String   @id @default(uuid())
  penggunaId String
  pengguna   Pengguna @relation(fields: [penggunaId], references: [id], onDelete: Cascade)
  judul      String
  pesan      String
  isRead     Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProgramStudi {
  id                         String          @id @default(uuid())
  nama                       String          @unique
  displayName                String
  pengguna                   Pengguna[]
  jenisKegiatan              JenisKegiatan[]
  mataKuliah                 MataKuliah[]
  templateSingleFieldForDate Boolean         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- MODEL JenisKegiatan (Dengan isMataKuliahRequired) ---
model JenisKegiatan {
  id                   String       @id @default(uuid())
  programStudiId       String
  programStudi         ProgramStudi @relation(fields: [programStudiId], references: [id])
  nama                 String
  templateIdentifier   String?      @unique
  isMataKuliahRequired Boolean      @default(true) // <-- TAMBAHKAN INI

  kegiatan Kegiatan[]
  fields   JenisKegiatanField[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([programStudiId, nama])
}

// --- MODEL JenisKegiatanField ---
model JenisKegiatanField {
  id              String        @id @default(uuid())
  jenisKegiatanId String
  jenisKegiatan   JenisKegiatan @relation(fields: [jenisKegiatanId], references: [id])
  fieldName       String
  fieldType       String
  templateKey     String?
  isRequired      Boolean       @default(false)
  order           Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fieldValues FieldKegiatanValues[]

  @@unique([jenisKegiatanId, fieldName])
}

// --- MODEL FieldKegiatanValues ---
model FieldKegiatanValues {
  id                   String             @id @default(uuid())
  kegiatanId           String
  kegiatan             Kegiatan           @relation(fields: [kegiatanId], references: [id], onDelete: Cascade)
  jenisKegiatanFieldId String
  jenisKegiatanField   JenisKegiatanField @relation(fields: [jenisKegiatanFieldId], references: [id])
  value                String             @db.VarChar(255) // Menyimpan nilai sebagai string

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([kegiatanId, jenisKegiatanFieldId])
}

// --- RiwayatPerubahanPembimbing ---
model RiwayatPerubahanPembimbing {
  id               String    @id @default(uuid())
  mahasiswaId      String
  mahasiswa        Mahasiswa @relation(fields: [mahasiswaId], references: [id])
  alasan           String
  pembimbingIdLama String?
  pembimbingIdBaru String?
  changedAt        DateTime  @default(now())
}
